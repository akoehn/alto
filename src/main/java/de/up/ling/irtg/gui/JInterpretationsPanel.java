/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.up.ling.irtg.gui;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author koller
 */
public class JInterpretationsPanel extends javax.swing.JPanel {
    private final Map<String, JTextField> inputFields;
    private final Map<String, JTextField> optionFields;
    
    /**
     * Creates new form JInterpretationsPanel
     */
    public JInterpretationsPanel(List<String> interpretations, List<Boolean> hasOptions) {
        setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));
//        initComponents();
        
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.WEST;
        
        GridBagLayout gridbag = new GridBagLayout();
        setLayout(gridbag);

        inputFields = new HashMap<>();
        optionFields = new HashMap<>();

        int nextY = 0;

        c.anchor = GridBagConstraints.FIRST_LINE_START;

        for (String intp : interpretations) {
            c.gridy = nextY;

            c.fill = GridBagConstraints.NONE;
            c.gridx = 0;
            c.weightx = 0;
            c.insets = new Insets(0, 0, 0, 0);
            JLabel jl = new JLabel(intp + ":"); // was: "Input on interpretation " + 
            gridbag.setConstraints(jl, c);
            add(jl);

            nextY++;
            c.gridy = nextY;

            c.fill = GridBagConstraints.HORIZONTAL;
            c.gridx = 0;
            c.weightx = 1;
            c.insets = new Insets(0, 0, 10, 0);

            JTextField comp = new JTextField(40);
            gridbag.setConstraints(comp, c);
            add(comp);
            inputFields.put(intp, comp);

            nextY++;
        }
        
        for (int i = 0; i < interpretations.size(); i++) {
            String intp = interpretations.get(i);
            boolean opts = hasOptions.get(i);

            if (opts) {
                c.gridy = nextY;

                c.fill = GridBagConstraints.NONE;
                c.gridx = 0;
                c.weightx = 0;
                c.insets = new Insets(0, 0, 0, 0);
                JLabel jl = new JLabel("Options for interpretation " + intp + ":");
                gridbag.setConstraints(jl, c);
                add(jl);

                nextY++;
                c.gridy = nextY;

                c.fill = GridBagConstraints.HORIZONTAL;
                c.gridx = 0;
                c.weightx = 1;
                c.insets = new Insets(0, 0, 10, 0);

                JTextField comp = new JTextField(40);
                gridbag.setConstraints(comp, c);
                add(comp);
                optionFields.put(intp, comp);

                nextY++;
            }
        }
        
        validate();
        
//        // create fields for options
//        // create fields for input values
//        c = new GridBagConstraints();
//        c.fill = GridBagConstraints.NONE;
//        c.anchor = GridBagConstraints.WEST;
//
//        gridbag = new GridBagLayout();
//        setLayout(gridbag);
//
//        nextY = 0;
//
//        c.anchor = GridBagConstraints.FIRST_LINE_START;
//
//        
//
//        revalidate();

        //jif.pack();
//        initComponents();
    }
    
    public Map<String, String> getInputValues() {
        Map<String,String> inputValues = new HashMap<>();

        for (String intp : inputFields.keySet()) {
            if (!"".equals(inputFields.get(intp).getText())) {
                inputValues.put(intp, inputFields.get(intp).getText());
            }
        }
        
        return inputValues;
    }

    public Map<String, String> getOptionValues() {
        Map<String,String> inputValues = new HashMap<>();

        for (String intp : optionFields.keySet()) {
            if (!"".equals(optionFields.get(intp).getText())) {
                inputValues.put(intp, optionFields.get(intp).getText());
            }
        }
        
        return inputValues;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
