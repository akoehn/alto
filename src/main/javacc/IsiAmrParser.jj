/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
  STATIC = false;
  LOOKAHEAD=2; // speed up parser by removing this and fixing choice conflict in ctt() differently
  FORCE_LA_CHECK=true;
}
PARSER_BEGIN(IsiAmrParser)
package de.up.ling.irtg.algebra.graph;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.*;
import java.io.*;
import org.jgrapht.*;
import org.jgrapht.graph.*;

/**
 * Parser for sets of strings and sets of tuples of strings,
 * e.g. "{a, b, c}" or "{(a,b), (c,d)}".
 * @author Alexander Koller
 */
public class IsiAmrParser {
    // private static IsiAmrParser parser = new IsiAmrParser(new ByteArrayInputStream(new byte[]{}));
    private DirectedGraph<GraphNode,GraphEdge> graph = null;
    private Map<String,GraphNode> nodes = null;
    private int nextGensym = 1;

	public static DirectedGraph<GraphNode,GraphEdge> parse(Reader reader) throws ParseException{
		IsiAmrParser parser = new IsiAmrParser(new ByteArrayInputStream(new byte[]{}));

                parser.ReInit(reader);

                parser.graph = new DefaultDirectedGraph<GraphNode, GraphEdge>(new GraphEdgeFactory());
                parser.nodes = new HashMap<String,GraphNode>();

                parser.node();
		return parser.graph;
	}

        private String gensym() {
            return "_n" + (nextGensym++);
        }
}
PARSER_END(IsiAmrParser)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
    <NAME: ( ~["(", ")", " ", "\t", "\n", "\r", ":", "\"", "\'", "/"] (~[" ", "\t", "\n", "\r", ")"])* )> |
    <EDGE: [":"] (~[" ", "\t", "\n"])*> |
    <DOUBLE_QUOTED_TOKEN: "\"" (~["\""])* "\"">
}

GraphNode node() :
{
  GraphNode u;
  String nodename;
  String nodelabel;
  String edgelabel;
  GraphNode edgeTarget;  
}
{
  "(" (nodename=token() "/" nodelabel=token()  {
         u = new GraphNode(nodename, nodelabel);
         nodes.put(nodename, u);
         graph.addVertex(u);
       })
      (edgelabel=edge()  edgeTarget=node() {
         GraphEdge e = graph.addEdge(u, edgeTarget);
         e.setLabel(edgelabel);
       })*
  ")" { return u; }
  | nodename=token() { 
       if( nodes.containsKey(nodename) ) {
        return nodes.get(nodename);
       } else {
        u = new GraphNode(gensym(), nodename);
        graph.addVertex(u);
        return u;
       }
   }
}

String token() :
{
    Token tok;
}
{
    tok = <NAME> { return tok.image; }
    | tok = <DOUBLE_QUOTED_TOKEN> { return tok.image.substring(1, tok.image.length()-1); }
}

String edge() :
{
    Token tok;
}{
    tok = <EDGE> { return tok.image.substring(1); }
}