/**
 * JavaCC file
 */


options {
  JDK_VERSION = "1.5";
  STATIC = false;
  LOOKAHEAD=2; // speed up parser by removing this and fixing choice conflict in ctt() differently
  FORCE_LA_CHECK=true;
}
PARSER_BEGIN(SetParser)
package de.up.ling.irtg.algebra;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.*;
import java.io.*;

/**
 * Parser for sets of strings and sets of tuples of strings,
 * e.g. "{a, b, c}" or "{(a,b), (c,d)}".
 * @author Alexander Koller
 */
public class SetParser {
    private static SetParser parser = new SetParser(new ByteArrayInputStream(new byte[]{}));
    private static Set<List<String>> ret = null;

	public static Set<List<String>> parse(Reader reader) throws ParseException{
		parser.ReInit(reader);
                ret = new HashSet<List<String>>();

		parser.set();
		return ret;
	}
}
PARSER_END(SetParser)

SKIP : { " " | "\t" }

TOKEN :
{
    < ELEMENT: (["a"-"z","A"-"Z","_", "'", "<", ">", "+", "-", "0"-"9", "*", "."] )+ > |
    <LINE_END_COMMENT: "//" (~["\n"])* >
}

void set() :
{
    List<String> x;
}
{
    "{" x = tuple() { ret.add(x); } ("," x = tuple() { ret.add(x); })* "}"
}

List<String> tuple() :
{
    List<String> ret = new ArrayList<String>();
    String x;
}
{
    (x=<ELEMENT>.image { ret.add(x); } |
     "(" x = <ELEMENT>.image { ret.add(x); } ("," x = <ELEMENT>.image { ret.add(x); })* ")")
        { return ret; }
}

