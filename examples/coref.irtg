
interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation graph: de.up.ling.irtg.algebra.graph.GraphAlgebra


S! -> want2(NP, VP)
[string] *(?1, *(wants, *(to, ?2)))
[graph]  merge(merge("(u<root> / want-01  :ARG0 (b<subj>)  :ARG1 (g<vcomp>))", r_subj(?1)), r_vcomp(r_subj_subj(?2)))

S -> want3(NP, NP, VP)
[string] *(?1, *(wants, *(?2, *(to, ?3))))
[graph] merge(merge(merge("(u<root> / want-01  :ARG0 (v<subj>)  :ARG1 (w<vcomp>)  :dummy (x<obj>))", 
                          r_subj(?1)), 
                    r_obj(?2)), 
              r_vcomp(r_subj_obj(?3)))

VP -> like(NP)
[string] *(like, ?1)
[graph] merge("(u<root> / like-01  :ARG0 (v<subj>)  :ARG1 (w<obj>))", r_obj(?1))

S -> likes(NP,NP)
[string] *(?1, *(likes, ?2))
[graph]  merge(merge("(u<root> / like-01  :ARG0 (v<subj>)  :ARG1 (w<obj>))", r_subj(?1)), r_obj(?2))

NP -> bill
[string] bill
[graph] "(b<root,coref1> / bill)"

NP -> him
[string] him
[graph] "(b<root,coref1>)"

NP -> girl
[string] *(the, girl)
[graph]  "(x<root> / girl)"


